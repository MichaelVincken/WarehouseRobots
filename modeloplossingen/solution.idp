/** 
* Skeleton for the first part of the project. 
*
* No names in this skeleton can be changed, you can add things to the vocabulary and you should definitely add stuff to the theory. 
*/

/**
How to run tests:
idp/WarehouseRobots$ idp instances.idp -e "check()"
*/

vocabulary warehousevoc{
    type pallet

    on(pallet,pallet) //on(p1,p2) means p1 is standing on p2
    carried(pallet) //carried(p1) means p1 is carried by the robot

    type xco isa nat
    type yco isa nat	
    type location constructed from {grid(xco,yco)}

    inaccessible(location) //Locations that cannot be accessed by the robot and cannot be occupied by pallets
    robotposition: location //position of the robot
    position(pallet): location //position of the pallets

    type dir constructed from {north, east, south, west}
    facing: dir //direction in which the robot is facing

    type height isa nat 
    ceiling: height //the height of the ceiling

    //Extra symbols
    above(pallet,pallet) //above(p1,p2) means p1 is above p2
    height(pallet) : height //height of the pallets
}

theory solution: warehousevoc{

    // PALLET THEORY

    // Inductive definition of above
    {
        ! p1 [pallet], p2 [pallet] : above(p1,p2) <- on(p1,p2).
        ! p1 [pallet], p2 [pallet] , p3 [pallet] : above(p1,p2) <- above(p1,p3) & above(p3,p2).
    }

    // Pallets have a position.
    // A pallet is either standing on the floor..
    ! p [pallet]  : ~inaccessible(position(p)).

    // ..on another pallet or it is carried by the robot.
    // Pallets cannot fly, so there has to a pallet q -standing on the ground- pallet p is resting on.
    // ! p [pallet] : carried(p) | ? q [pallet] : on(p,q).

    // It cannot be the case that pallet p1 is positioned on pallet p2 and at the same time pallet p2 rests on pallet p1.
    // ! p1 [pallet], p2 [pallet] : on(p1,p2) => ~on(p2,p1).
    // See manual p.11 (Binary Quantification)
    ! (p1,p2) in on: ~on(p2,p1).

    // Pallets have the same size, hence there can be at most one other pallet resting on every other pallet.
    ! p1 [pallet], p2 [pallet] , p3 [pallet] : (on(p2,p1) & on(p3,p1)) => p2 = p3.

    // The height of a pallet p is defined by the number of pallets pallet p is resting on plus one (pallet p itself).
    ! p [pallet] : height(p) = #{q [pallet] : above(p,q)} + 1.

    // Stacks of pallets are limited in height by the ceiling of the warehouse.
    ! p [pallet] : height(p) =< ceiling.



    // ROBOT THEORY

    // He can carry pallets around, but no more than one pallet at a time.
    ?=<1 p [pallet] : carried(p).

    // A robot cannot drive on a the position that is inaccessible.
    ~inaccessible(robotposition).

    // The robot cannot stand on a stack of pallets
    ! p [pallet] : ~carried(p) => position(p) ~= robotposition.
    
    // Pallets only have the same position as the robot when they are being carried by the robot.
    ! p [pallet] : carried(p) => position(p) = robotposition.

}
